[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "PyPDF2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "format_message",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def format_message(role, content):\n    if role == \"user\":\n        return f\"\"\"\n        <div style='background-color:#f0f2f6; padding:12px; border-radius:10px; margin-bottom:8px;'>\n            <b>üßë You:</b><br>{content}\n        </div>\n        \"\"\"\n    else:\n        return f\"\"\"\n        <div style='background-color:#e6f4ea; padding:12px; border-radius:10px; margin-bottom:8px;'>",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MEMORY_FILE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "MEMORY_FILE = \"chat_memory.json\"\n# ------------------ SESSION INIT ------------------\nif \"selected_role\" not in st.session_state:\n    st.session_state.selected_role = \"General\"\nif \"chat_history\" not in st.session_state:\n    try:\n        with open(\"chat_history.json\", \"r\") as f:\n            st.session_state.chat_history = json.load(f)\n    except FileNotFoundError:\n        st.session_state.chat_history = []",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = genai.GenerativeModel(\"models/gemini-1.5-flash-002\")\n# üñ•Ô∏è Streamlit App Config\nst.set_page_config(page_title=\"Agentic AI Chat\", page_icon=\"ü§ñ\")\nst.title(\"ü§ñ Agentic AI Assistant\")\n# ------------------ SIDEBAR ------------------\nwith st.sidebar:\n    st.header(\"üõ†Ô∏è Settings\")\n    role = st.selectbox(\n        \"Choose Role:\",\n        [\"General\", \"Developer\", \"Marketer\", \"Student\", \"Productivity Coach\", \"Creative Writer\"]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "role_prompts",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "role_prompts = {\n    \"General\": \"You are a helpful and friendly assistant.\",\n    \"Developer\": \"You are a technical assistant for developers. Answer with clear explanations and code examples when helpful.\",\n    \"Marketer\": \"You are a digital marketing assistant. Provide strategies, copy ideas, and funnel suggestions.\",\n    \"Student\": \"You are a study buddy. Help with explaining topics simply and giving examples.\",\n    \"Productivity Coach\": \"You are a motivational productivity coach. Help users stay focused, plan, and stay motivated.\",\n    \"Creative Writer\": \"You are a writing assistant. Help with storytelling, prompts, and creative writing tips.\"\n}\nsystem_prompt = role_prompts.get(role, role_prompts[\"General\"])\nst.caption(f\"üíº Current Role: *{role}*\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "system_prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "system_prompt = role_prompts.get(role, role_prompts[\"General\"])\nst.caption(f\"üíº Current Role: *{role}*\")\nwith st.expander(\"üîß System Prompt\", expanded=False):\n    st.code(system_prompt, language=\"markdown\")\n# ------------------ DISPLAY CHAT HISTORY ------------------\ndef format_message(role, content):\n    if role == \"user\":\n        return f\"\"\"\n        <div style='background-color:#f0f2f6; padding:12px; border-radius:10px; margin-bottom:8px;'>\n            <b>üßë You:</b><br>{content}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "file_text",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "file_text = \"\"\nwith st.expander(\"üìÑ Upload Reference Document\"):\n    uploaded_file = st.file_uploader(\"Upload a PDF or TXT file\", type=[\"pdf\", \"txt\"])\n    if uploaded_file:\n        if uploaded_file.type == \"application/pdf\":\n            pdf_reader = PyPDF2.PdfReader(uploaded_file)\n            for page in pdf_reader.pages:\n                file_text += page.extract_text()\n        elif uploaded_file.type == \"text/plain\":\n            stringio = io.StringIO(uploaded_file.getvalue().decode(\"utf-8\"))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "prompt = st.chat_input(\"Ask me anything!\")\nif prompt:\n    st.chat_message(\"user\").markdown(prompt)\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    conversation = system_prompt + \"\\n\\n\"\n    for msg in st.session_state.messages:\n        role_label = \"User\" if msg[\"role\"] == \"user\" else \"AI\"\n        conversation += f\"{role_label}: {msg['content']}\\n\"\n    with st.chat_message(\"ai\"):\n        with st.spinner(\"ü§ñ Generating a thoughtful response...\"):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "gemini_test",
        "description": "gemini_test",
        "peekOfCode": "model = genai.GenerativeModel(\"models/gemini-1.5-flash-002\")\nresponse = model.generate_content(\"Tell me a fun fact about AI.\")\nprint(response.text)",
        "detail": "gemini_test",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "gemini_test",
        "description": "gemini_test",
        "peekOfCode": "response = model.generate_content(\"Tell me a fun fact about AI.\")\nprint(response.text)",
        "detail": "gemini_test",
        "documentation": {}
    }
]